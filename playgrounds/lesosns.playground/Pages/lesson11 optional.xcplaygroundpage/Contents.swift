//: [Previous](@previous)

import Foundation



// **Any и AnyObject**

// когда вы не знаете конкретный тип данных или переменной, можно использовать `Any` или `AnyObject`. Они представляют собой обобщенные типы данных.

// **Any**:
// Any может представлять собой экземпляр любого типа, даже функциональных типов.

let int1 = 1
let double2 = 2.0
let string3 = "string"
let closure4: () -> Void = { print("closure4") }

let arr: [?] = [int1, double2]

let arr1: [Any] = [int1, double2, string3, closure4]

var arr2: [Any] = [
    5,
    "andreas",
    10.5,
    { text: String -> Int in return text.count }
]


// **AnyObject**:
// AnyObject` может представлять собой экземпляр любого класса. Обычно используется при работе с Objective-C API, так как в Objective-C нет строгой типизации, как в Swift.

class MyClass { }
var objects: [AnyObject] = [MyClass(), MyClass()]



// ========================================================

// разберёмся с опшиналами

// ### 1. Что такое `nil`?
// `nil` представляет отсутствующее значение. Оно используется в Swift, чтобы указать, что у опциональной переменной нет значения.

// ### 2. Как создать переменную опционального типа?

var name: String? = nil

// `String?` - это опциональная версия `String`. Значение по умолчанию такой переменной - `nil`.

// ### 3. Что такое восклицательный знак `!`?
// Если вы уверены, что опциональное значение не `nil`, вы можете использовать `!`, чтобы извлечь его значение. Это называется "forced unwrapping".

let name1: String? = "Andreas"
let unwrappedName1: String = name1!


// ### 4. Что такое два вопросительных знака `??`?
// Оператор `??` позволяет предоставить значение по умолчанию для опционала.

let name2: String? = nil
let unwrappedName2: String = name2 ?? "Default"


// ### 5. С помощью `if`

name1
if let name1 {
    print(name1)
}
name1

// ### 6. С помощью `guard`
name2
guard let name2 else { return }
print(name2)
name2


// ### 8. Через `enums`
// Опшиналы реализованы как перечисления:

enum Optional<Value> {
    case none
    case some(Value)
}

var x: Int? = 1
var x: Optional<Int> = .some(1)

// ### 9. Связь с `try?` и `try!`
// `try?` возвращает опциональное значение, а `try!` форсирует извлечение результата и вызовет аварийное завершение, если произойдет ошибка.

//  let x1 = try? someFunction()
//  let x2 = try! someFunction()

// ### 10. Опциональная последовательность (`optional chaining`)
// Позволяет выполнять запросы к свойствам, методам и индексам опциональных значений.

let length = name?.count

class Address {
    var streetName: String?
}

let address: Address? = Address()
let streetNameLength = address?.streetName?.count

// =========================================================

/*
 
 Урок по Git: Введение в GitHub и GitLab
 
 1. **Что такое Git?**
 Git - это система контроля версий, которая позволяет разработчикам отслеживать изменения в коде и сотрудничать с другими.

 Популярные сервисы:
 GitHub: Популярная платформа для хостинга репозиториев. Отличается интуитивным интерфейсом и большим сообществом.
 GitLab: Также платформа для хостинга репозиториев, но с более широкими возможностями по настройке и встроенными CI/CD инструментами.
 
 2. **Терминология Git:**
 
 - **Branch (ветка)(копия)**
 Ветка - это отдельная линия разработки. Вместо того чтобы работать над основным кодом, вы можете создать ветку и работать над ней.

 - **Коммит (Commit)**
 Когда вы вносите изменения в код и хотите сохранить их, вы "коммитите" их. Это как сохранение в игре: вы фиксируете текущее состояние проекта.
 
 *Пример:* `git commit -m "Добавлена новая функция"`
 
 - **Push (запушить)**
 После того как вы закоммитили свои изменения, вы можете отправить их на удаленный сервер (например, на GitHub или GitLab). Этот процесс называется "push".
 
 *Пример:* `git push origin master`
 
 - **Pull (запулить)**
 Это процесс получения последних изменений с удаленного сервера. Если кто-то внес изменения в код и запушил их на сервер, вы можете "запулить" их к себе.
 
 *Пример:* `git pull origin master`
  
 - **Merge (слияние)**
 Если вы закончили работу над веткой и хотите объединить ее с основным кодом, вы используете команду "merge".
 
 - **Pull Request (Пулл реквест)**
 Пулл реквест - это запрос на внесение изменений из одной ветки в другую, чаще всего в основную ветку репозитория. Он позволяет: *Обсудить изменения* то есть *Провести код-ревью*. Другие разработчики могут прокомментировать ваш код, предложить изменения или улучшения. Это шанс для команды убедиться, что код соответствует стандартам качества.
 
 ---
 
 Надеюсь, это был короткий и понятный урок. Если у вас есть еще вопросы, пожалуйста, дайте знать!
 
 Основные команды Git:
 git clone [url]: Клонировать репозиторий.
 git status: Проверить состояние изменений.
 git add [file]: Добавить файлы для коммита.
 git commit -m "сообщение": Зафиксировать изменения.
 git push: Отправить изменения в удаленный репозиторий.
 git pull: Получить последние изменения из удаленного репозитория.
 Ветвление:
 git branch: Посмотреть список веток.
 git checkout [branch-name]: Переключиться на другую ветку.
 git merge [branch-name]: Слить изменения из одной ветки в другую.
 */


//: [Next](@next)
