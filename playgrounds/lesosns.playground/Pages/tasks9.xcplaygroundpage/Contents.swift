//: [Previous](@previous)

import Foundation


/*

 
 **1. Guard**
 
 1.1. Создайте функцию, которая принимает опциональную строку. Используйте `guard` для проверки, что строка не nil и длина строки больше 5 символов. Если условия не выполняются, вывидите сообщение об ошибке.
 
 1.2. Напишите функцию, которая принимает возраст как Int и использует `guard` для проверки, что возраст больше или равен 18. Если это не так, верните соответствующее сообщение.
 
 1.3. Создайте функцию, которая принимает массив чисел. Используйте `guard` для проверки, что массив не пуст, а первый и последний элементы массива больше 10. Если одно из условий не выполняется, вывидите сообщение об ошибке.
 
 **2. Defer**
 
 2.1. Напишите функцию, которая выводит числа от 1 до 10. Используйте defer, чтобы после завершения цикла выводилось сообщение "Цикл завершен".
 
 1.2. Создайте функцию, которая принимает строку и пытается преобразовать её в целое число (Int). Используйте defer, чтобы выводилось сообщение "Преобразование завершено", независимо от результата.
 
 2.3. Создайте функцию с несколькими выходами (return). Используйте `defer` для вывода сообщения каждый раз, когда функция завершается, независимо от точки выхода.
 
 **3. Protocols**
 
 3.1. Определите протокол `Flying`, который требует метод `fly()`. Создайте два класса: `Bird` и `Airplane`, которые реализуют этот протокол.
 
 3.2. Создайте протокол `Charging`, который содержит свойство `batteryLevel` и метод `charge()`. Реализуйте этот протокол в классе `Phone`.
 
 3.3. Определите протоколы `Drawable` и `Erasable`. `Drawable` должен иметь метод `draw()`, а `Erasable` метод `erase()`. Создайте класс `Pencil`, который реализует оба протокола.
 
**4. Ошибки**
 
 4.1. Задание: "Валидация данных"
 
 Сценарий: Ваше приложение получает данные от пользователя для регистрации - имя пользователя и пароль. Вы должны убедиться, что данные валидны.
 
 Задача:
 
 Создайте перечисление ValidationError, содержащее ошибки: usernameTooShort, passwordTooWeak и emailNotValid. Создайте перечисление CalculatorError с ошибкой divisionByZero.
 Напишите функцию validateUser(username: String, password: String, email: String) throws -> Bool, которая выбрасывает ошибки из ValidationError при невалидных данных.
 Напишите функцию checkPassword(_ password: String) throws -> Bool, которая выбрасывает ошибки из PasswordError, если пароль не соответствует критериям.
 Вызовите функцию validateUser и обработайте возможные ошибки, информируя пользователя о проблемах с его данными.
 Проверьте несколько паролей и обработайте возникающие ошибки.
 
 
 
 4.2 Задание: "Калькулятор деления"
 
 Сценарий: Вы создаете функцию для деления двух чисел.
 
 Задача:
 
 Создайте перечисление CalculatorError с ошибкой divisionByZero.
 Напишите функцию divide(_ a: Double, by b: Double) throws -> Double, которая выбрасывает divisionByZero ошибку, если делитель равен нулю.
 Вызовите функцию divide с различными значениями и обработайте возможные ошибки.
 
 4.3 Задание: "Выбор напитка"
 
 Сценарий: Пользователь хочет заказать напиток из меню.
 
 Задача:
 
 Создайте перечисление DrinkError с ошибками: outOfStock, notOnMenu.
 Напишите функцию orderDrink(_ name: String) throws -> String, которая возвращает сообщение об успешном заказе или выбрасывает ошибку из DrinkError.
 Протестируйте функцию с различными напитками и обработайте возможные ошибки.
 
 
 4.4 Задание: "Расчет скидки"
 
 - Создайте перечисление PromoCode, в котором будут промокоды: summer, winterSale и special. Каждому промокоду присвойте ассоциированное значение — процент скидки в виде Double.
 - Создайте перечисление PromoError. Оно должно содержать ошибки: codeExpired, codeInvalid и alreadyUsed. Каждой ошибке присвойте ассоциированное значение — строку с промокодом, который вызвал ошибку.
 
 Напишите функцию applyPromoCode(_ code: String) throws -> Double. Функция должна принимать строку с промокодом и возвращать процент скидки, если промокод действителен.
 В случае, если промокод неверный, истек или уже был использован, функция должна выбрасывать соответствующую ошибку из PromoError с ассоциированным значением (самим промокодом).
 
 Протестируйте функцию applyPromoCode с различными промокодами.
 Используя блок do-catch, обработайте ошибки и выведите соответствующие сообщения об ошибках, используя ассоциированные значения из PromoError.
 */




//: [Next](@next)
